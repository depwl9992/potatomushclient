#summary /commands
=/commands=

A "/command" is a special command you can type into the input box (or anywhere else that sends text to the MU`*`, like [Events]). Rather than being sent to the MU`*`, the command will be executed by Potato. (If you want to send something to the game beginning with a /, use two, like "//foo".) Arguments to /commands are parsed for [SlashCommandVariables variables]. The following is a list of available commands, with terse descriptions:

  * `/addspawn <spawn1> [<spawn2> [<spawnN>]]` - Start spawning all output for this connection (regardless of events) to each of the given spawn windows.
  * `/all <string>` - Send `<string>` to all open connections.
  * `/at <time>=<command>` - At `<time>`, send the command `<command>` to the MU`*`. See detailed help for [SlashCommandsAt /at] for more information.
  * `/cancelat <id>` - Cancel the specified [SlashCommandsAt /at].
  * `/close` - Close the current connection.
  * `/cls [<conn>[.<window>]]` - Clear the screen for the specified connection, or the current connection if one isn't given. If a `<window>` is given, it clears that spawn window instead.
  * `/connect <address>` - Connect to an address. Can be either the name of a defined world from the Address Book, a `host:port` string or a `host port` string.
  * `/debug` - Toggle Debug Packets on and off.
  * `/delspawn <spawn1> [<spawn2> [<spawnN>]]` - Stop spawning all output (started via `/addspawn`) to the specified spawn windows.
  * `/disconnect` - Disconnect the current connection.
  * `/edit` - Edit the settings for the current world (or the program settings, if no connections are open).
  * `/eval <tcl code>` - Evaluates a string as Tcl code, and prints the result in the output window, in the form `Return (<len>): <string>`, or `Error (<len>): <string>`, depending on whether the code threw an error.
  * `/exit` - Exit Potato.
  * `/history [<number>]` - With no arg, open the Input History window. With an arg, place the `<number>`th entry from the history into the input window. `<number>` can be negative, to count from the end instead of the start.
  * `/input <num> <string>` - Print `<string>` into the `<num>`th input window. `<num>` can be 1 for the top input, 2 for the bottom, or 3 for the one which currently has focus.
  * `/limit` - Filters output. See the help for [SlashCommandsLimit /limit] for more details.
  * `/log` - Start or stop logging. See the help for [Logging#/log /log] for more details.
  * `/print <message>` - Print `<message>` as a system message.
  * `/quick <address>` - Perform a [QuickConnect quick connect] to `<address>`, which is either a `host:port` or `host port` string.
  * `/reconnect` - Reconnect the current connection.
  * `/rename [<name>]` - Set a temporary name for the current connection, or clear the existing temporary name. Useful if you connect to one world multiple times, to make them easier to distinguish.
  * `/runmacro blablabla`




Available slash commands: addspawn, all, at, cancelat, close, cls, connect, debug, delspawn, disconnect, edit, eval, exit, history, input, limit, log, print, quick, reconnect, rename, runmacro, send, set, setglobal, setprefix, show, silent, slash, speedwalk, tcl, tinyurl, toggle, unlimit, unset, unsetglobal, vars, and web
